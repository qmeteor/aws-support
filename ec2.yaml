AWSTemplateFormatVersion: 2010-09-09
Description: 'Create
  an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This creates an EC2 security
  group for the instance to give you SSH access.'
Parameters:
    KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
      Type: AWS::EC2::KeyPair::KeyName
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
    InstanceType:
      Description: Web Crawler EC2 instance type
      Type: String
      Default: t3.small
      AllowedValues:
        - t3.micro
        - t3.small
        - t3.medium
      ConstraintDescription: must be a valid EC2 instance type.
    SSHLocation:
      Description: The IP address range that can be used to SSH to the EC2 instances
      Type: String
      MinLength: '9'
      MaxLength: '18'
      Default: 0.0.0.0/0 # Allows for all IP addresses
      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    SubnetId:
      Description: Subnet to launch instance into.
      Type: String
      Default: subnet-0364eac8fb067caeb
    UserData:
      Description: 'Optional Bash script executed on first instance launch.'
      Type: String
      Default: ''
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-00eb20669e0990cb4
    us-east-2:
      AMIID: ami-00eb20669e0990cb4
    us-west-1:
      AMIID: ami-04351e12
    us-west-2:
      AMIID: ami-04351e12
    eu-west-1:
      AMIID: ami-04351e12
    eu-central-1:
      AMIID: ami-04351e12
    ap-northeast-1:
      AMIID: ami-04351e12
    ap-southeast-1:
      AMIID: ami-04351e12
    ap-southeast-2:
      AMIID: ami-04351e12
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
          - !GetAtt HttpSecurityGroup.GroupId
          - !GetAtt SshSecurityGroup.GroupId
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      SubnetId: !Ref SubnetId
      UserData: !Base64 # TODO: Setup docker here pull from ECR and run container.
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y &&
          yes | yum install httpd &&
          chkconfig httpd on &&
          /etc/init.d/httpd start &&
          echo "<html><h1>Hello To The World!</h1></html>" > /var/www/html/index.html
      Tags:
        -
          Key: "StackName"
          Value: "value1"
  HttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access via port 80
      VpcId: !ImportValue MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref SSHLocation
  SshSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable access via port 80
        VpcId: !ImportValue MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Ref SSHLocation

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance
      - PublicIp